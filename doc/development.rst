=================
Методы разработки
=================

.. contents::
   :local:

Документ описывает методы, практики, приемы, применяемые в работе с кодом.


Действия при обновлении кода
============================

При изменении исходного кода пересобирать проект нет необходимости. Есть лишь
несколько файлов, непосредственно участвующих в сборке приложения.  Поэтому,
если обновлены:

- setup.py
- buildout.cfg
- versions.cfg
- файлы в директории templates/

лишь в этом случае нужно запустить::

  >>> bin/buildout

Всегда нужно запускать конфигуратор Upgrade. Конфигураторы пишутся так,
что их можно запускать многократно - повторная установка компонент
исключается.

В отдельных случаях нужно запускать генерации базы данных. Это можно
увидеть, открыв страницу генераций.


Намылить, смыть, повторить
==========================

Если разработчик не знает, с чего начать - значит нужно начать с написания
тестов. Делается это так:

- в директории модуля bbru.tests cоздается файл с осмысленным названием
  и расширением `.rst`. В него копируется начальная часть файла `frontpage.rst`
  (подготовка тестового окружения и установка/настройка локального сайта).

- далее пишутся необходимые тесты будущего функционала. Важное значение
  имеет описательная составляющая - пишем на русском языке.

- когда нужно временно деактивировать тестовый файл, достаточно поставить
  символ `#` перед маркером теста, т.е. `#:doctest:`

- можно писать и модули с регресионные тесты unittest.TestCase. Чтобы тестовый
  фреймворк z3c.testsetup распознал такой модуль, нужно начать файл так:

  """
  :unittest:
  """

  import unittest
  import zope.component

  class Test(unittest.TestCase):
     def test_foo(self):
        # ...

- пишутся интерфейсы.

- интерфейсы реализуются до тех пор, пока все тесты не пройдут.
