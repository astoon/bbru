================
Общие соглашения
================

1. Подразумевается использование Linux.

2. Комментарии в коде - _только_ на русском языке. Проект в целом - сугубо
   русскоязычный.

3. Приложение формально разделяется на модули, обеспечивающие некую выделеную
   предметную область. Это модели второго уровня вложенности, такие как
   bbru.localsite, bbru.skin, bbru.authenticaton и т.д.

   К примеру, начальная страница не относится к какой-либо отдельной смысловой
   части проекта. В том же время - это и не часть скина, т.к. под скином
   подразумеваем размещение элементов, стили и т.д. Поэтому, хоть она и
   представляет собой ничтожно малое количество кода - правильно выделить её
   в отдельный смысловой модуль - bbru.frontpage.

4. При разработке модуля, думании над ним, первым делом выделяются сущности
   предметной области и записываются в виде интерфейсов в interfaces.py

5. При написании кода ваимодействие одной части с другой может строиться
   только на интерфейсах. Т.е. когда разработчик смотрит в другой модуль,

   Задекларировав интерфейсы нового модуля, можно сделать коммит и вытолкнуть
   изменения в публичный репозиторий. Таким, образом, не задерживать остальных
   разработчиков, занятых на других модулях, ожиданием. Все что им нужно для своей
   работы от данного модуля - это его интерфейсы.   

6. Виды, по смыслу напрямую относящиеся к модулю, разрабатываются
   в субдиректории `browser`. Внедренные виды делаются на z3c.pagelet
   без специальной регистрации на скин приложения.

   Контент-провайдеры (в т.ч. вьюлеты) по возможности создаются
   также внутри предметного модуля, а не в модуле скина. Менеджеры
   же вьюлетов регистрируются в модуле скина.

7. Применяется следующий спич:

     # coding: utf-8

     # This code was developed for http://bluebream.ru by its community and

     # placed under Public Domain.

   Все остальное - на русском языке. Если есть выдержки кода, явно взятые
   откуда-то, то это обязательно указывается (авторство, копирайты, полный
   текст лицензии, дисклаймеры).

8. Файлы с кодом лучше поменьше кучковать, и больше разделять на субмодули,
   раскладывать по полочкам. При этом стараться обеспечивать интуитивность
   расположения кода.

9. Если не ясно, делать компонентным способом или некомпонентным, значит
   нужно делать компонентным, разбивать на кирпичики. Слить в монолит всегда
   успеем.

10. В BB можно оформлять регистрации по-всякому. Можно вообще грокать и
    почти не писать zcml. Но для данного проекта действует соглашение о том,
    что:

    - декларативные утверждения должны быть описаны на декларативном языке
    - как можно больше, по максимуму, выносится в zcml, облегчая пайтон-код.

11. Там, где вследствии использования zcml для регистрации глобальных
    компонент (например, browser:page, browser:viewlet, z3c:pagelet и другие),
    класс используется как mix-in для подмешивания в генерируемый класс, не
    нужно делать излишних наследований - добавить их всегда успеется. Например,
    это касается вьюлетов, где вообще не нужно наследовать - см. код регистрации
    соответствующей zcml директивы. Про BrowserPage тоже - нет необходимости 
    пихать его везде, хотя автоматом он и не подмешивается в страницы.

12. Test driven development - да.

13. Комментарии не просто русскоязычные, но еще и обучающие. Можно и нужно
    записывать ход мыслей, всяческие рассуждения, подробные объяснения как
    в учебнике для начинающих. То же самое касается и тестов.

14. Тесты складываем в bbru.tests, желательно стараться разделять их на
    отдельные файлы по смыслу.
